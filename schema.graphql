input Items {
    itemId: String!
    accounts: [String!]!
}

input SortBy {
    amount: Sort
    date: Sort 
}

enum GroupBy {
    transaction
    day
    week
    month
    category
    name
}

enum Sort {
  asc
  desc
}

type User {
    id: ID!
    username: String!
    items(containsid: [ID]): [PlaidItem]
    getTransaction(items: [Items!]!,
                   startDate: String!, 
                   endDate: String!, 
                   sort: SortBy,
                   group: GroupBy,
                   skip: Int, 
                   take: Int): [Transaction]
}

type Query @auth {
    getuser: User! 
}

type PlaidItem {
    itemId: ID!
    name: String!
    accounts: [Account]!
}

type Account {
    account_id: String!
    name: String!
}

type Transaction {
    account_id: ID!
    type: String!
    date: String!
    iso_currency_code: String!
    category: [String!]!
    amount: Float!
    payment_channel: String!
    merchant_name: String
}


type LinkToken {
    expiration: String!
    link_token: String!
    request_id: String!
    status_code: Int!
}

type Mutation {
    login(username: String!, password: String!): Boolean!
    signup(username: String!, password: String!): Boolean!
    signout: Boolean!  @auth
    createLinkToken: LinkToken  @auth
    setAccessToken(token: String): Boolean!  @auth
}